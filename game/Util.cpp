#include "Util.hpp"
#include <iostream>
#include <cstdint>
#include <sys/time.h>
#include <algorithm>


const std::string squareToCoordinates[64] = {
    "a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",
    "a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7",
    "a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6",
    "a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5",
    "a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4",
    "a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3",
    "a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2",
    "a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1",
};

const std::string asciiPieces = "PNBRQKpnbrq";

const std::string unicodePieces[12] = {"♙", "♘", "♗", "♖", "♕", "♔", "♟︎", "♞", "♝", "♜", "♛", "♚"};

const std::unordered_map<char, int> charPieces = {
    {'P', P}, {'N', N}, {'B', B}, {'R', R}, {'Q', Q}, {'K', K},
    {'p', p}, {'n', n}, {'b', b}, {'r', r}, {'q', q}, {'k', k}
};

const std::unordered_map<int, char> promotedPieces = {
    {Q, 'q'},
    {R, 'r'},
    {B, 'b'},
    {N, 'n'},
    {q, 'q'},
    {r, 'r'},
    {b, 'b'},
    {n, 'n'}
};


const std::unordered_map<int, int> indexToMoveCP{
    {0,    262152}, {65,   196616}, {130,  131080}, {195,  65544},
    {260,  262217}, {325,   196681}, {390, 131145}, {455, 65609},
    {520, 262282}, {585,   196746}, {650, 131210}, {715, 65674},
    {780, 262347}, {845,   196811}, {910, 131275}, {975, 65739},
    {1040, 262412}, {1105,  196876}, {1170, 131340}, {1235, 65804},
    {1300, 262477}, {1365,  196941}, {1430, 131405}, {1495, 65869},
    {1560, 262542}, {1625,  197006}, {1690, 131470}, {1755, 65934},
    {1820, 262607}, {1885,  197071}, {1950, 131535}, {2015, 65999},
    {2080, 683568}, {2145,  618032}, {2210, 552496}, {2275, 486960},
    {2340, 683633}, {2405,  618097}, {2470, 552561}, {2535, 487025},
    {2600, 683698}, {2665,  618162}, {2730, 552626}, {2795, 487090},
    {2860, 683763}, {2925,  618227}, {2990, 552691}, {3055, 487155},
    {3120, 683828}, {3185,  618292}, {3250, 552756}, {3315, 487220},
    {3380, 683893}, {3445,  618357}, {3510, 552821}, {3575, 487285},
    {3640, 683958}, {3705,  618422}, {3770, 552886}, {3835, 487350},
    {3900, 684023}, {3965,  618487}, {4030, 552951}, {4095, 487415},
};

const std::unordered_map<int, int> indexToMoveCaptureCP{
    {0,  1310792}, {1,  1245256}, {2,  1179720}, {3,  1114184},
    {4,  1310729}, {5,  1245193}, {6,  1179657}, {7,  1114121},
    {8,  1310857}, {9,  1245321}, {10, 1179785}, {11, 1114249},
    {12, 1310794}, {13, 1245258}, {14, 1179722}, {15, 1114186},
    {16, 1310922}, {17, 1245386}, {18, 1179850}, {19, 1114314},
    {20, 1310859}, {21, 1245323}, {22, 1179787}, {23, 1114251},
    {24, 1310987}, {25, 1245451}, {26, 1179915}, {27, 1114379},
    {28, 1310924}, {29, 1245388}, {30, 1179852}, {31, 1114316},
    {32, 1311052}, {33, 1245516}, {34, 1179980}, {35, 1114444},
    {36, 1310989}, {37, 1245453}, {38, 1179917}, {39, 1114381},
    {40, 1311117}, {41, 1245581}, {42, 1180045}, {43, 1114509},
    {44, 1311054}, {45, 1245518}, {46, 1179982}, {47, 1114446},
    {48, 1311182}, {49, 1245646}, {50, 1180110}, {51, 1114574},
    {52, 1311119}, {53, 1245583}, {54, 1180047}, {55, 1114511},
    {56, 1732208}, {57, 1666672}, {58, 1601136}, {59, 1535600},
    {60, 1732145}, {61, 1666609}, {62, 1601073}, {63, 1535537},
    {64, 1732273}, {65, 1666737}, {66, 1601201}, {67, 1535665},
    {68, 1732210}, {69, 1666674}, {70, 1601138}, {71, 1535602},
    {72, 1732338}, {73, 1666802}, {74, 1601266}, {75, 1535730},
    {76, 1732275}, {77, 1666739}, {78, 1601203}, {79, 1535667},
    {80, 1732403}, {81, 1666867}, {82, 1601331}, {83, 1535795},
    {84, 1732340}, {85, 1666804}, {86, 1601268}, {87, 1535732},
    {88, 1732468}, {89, 1666932}, {90, 1601396}, {91, 1535860},
    {92, 1732405}, {93, 1666869}, {94, 1601333}, {95, 1535797},
    {96, 1732533}, {97, 1666997}, {98, 1601461}, {99, 1535925},
    {100, 1732470}, {101, 1666934}, {102, 1601398}, {103, 1535862},
    {104, 1732598}, {105, 1667062}, {106, 1601526}, {107, 1535990},
    {108, 1732535}, {109, 1666999}, {110, 1601463}, {111, 1535927},
};


const std::unordered_map<int, int> moveToIndexCP{
    {262152, 0},    {196616, 65},    {131080, 130},   {65544, 195},
    {262217, 260},  {196681, 325},   {131145, 390},   {65609, 455},
    {262282, 512},  {196746, 577},   {131210, 642},   {65674, 707},
    {262347, 772},  {196811, 837},   {131275, 902},   {65739, 967},
    {262412, 1024}, {196876, 1089},  {131340, 1154},  {65804, 1219},
    {262477, 1284}, {196941, 1349},  {131405, 1414},  {65869, 1479},
    {262542, 1536}, {197006, 1601},  {131470, 1666},  {65934, 1731},
    {262607, 1796}, {197071, 1861},  {131535, 1926},  {65999, 1991},
    {683568, 2048}, {618032, 2113},  {552496, 2178},  {486960, 2243},
    {683633, 2308}, {618097, 2373},  {552561, 2438},  {487025, 2503},
    {683698, 2560}, {618162, 2625},  {552626, 2690},  {487090, 2755},
    {683763, 2820}, {618227, 2885},  {552691, 2950},  {487155, 3015},
    {683828, 3072}, {618292, 3137},  {552756, 3202},  {487220, 3267},
    {683893, 3332}, {618357, 3397},  {552821, 3462},  {487285, 3527},
    {683958, 3584}, {618422, 3649},  {552886, 3714},  {487350, 3779},
    {684023, 3844}, {618487, 3909},  {552951, 3974},  {487415, 4039}
};

const std::unordered_map<int, int> moveToIndexCaptureCP{
    {1310792, 0}, {1245256, 1}, {1179720, 2}, {1114184, 3}, {1310729, 4}, {1245193, 5}, {1179657, 6}, {1114121, 7},
    {1310857, 8}, {1245321, 9}, {1179785, 10}, {1114249, 11}, {1310794, 12}, {1245258, 13}, {1179722, 14}, {1114186, 15},
    {1310922, 16}, {1245386, 17}, {1179850, 18}, {1114314, 19}, {1310859, 20}, {1245323, 21}, {1179787, 22}, {1114251, 23},
    {1310987, 24}, {1245451, 25}, {1179915, 26}, {1114379, 27}, {1310924, 28}, {1245388, 29}, {1179852, 30}, {1114316, 31},
    {1311052, 32}, {1245516, 33}, {1179980, 34}, {1114444, 35}, {1310989, 36}, {1245453, 37}, {1179917, 38}, {1114381, 39},
    {1311117, 40}, {1245581, 41}, {1180045, 42}, {1114509, 43}, {1311054, 44}, {1245518, 45}, {1179982, 46}, {1114446, 47},
    {1311182, 48}, {1245646, 49}, {1180110, 50}, {1114574, 51}, {1311119, 52}, {1245583, 53}, {1180047, 54}, {1114511, 55},
    {1732208, 56}, {1666672, 57}, {1601136, 58}, {1535600, 59}, {1732145, 60}, {1666609, 61}, {1601073, 62}, {1535537, 63},
    {1732273, 64}, {1666737, 65}, {1601201, 66}, {1535665, 67}, {1732210, 68}, {1666674, 69}, {1601138, 70}, {1535602, 71},
    {1732338, 72}, {1666802, 73}, {1601266, 74}, {1535730, 75}, {1732275, 76}, {1666739, 77}, {1601203, 78}, {1535667, 79},
    {1732403, 80}, {1666867, 81}, {1601331, 82}, {1535795, 83}, {1732340, 84}, {1666804, 85}, {1601268, 86}, {1535732, 87},
    {1732468, 88}, {1666932, 89}, {1601396, 90}, {1535860, 91}, {1732405, 92}, {1666869, 93}, {1601333, 94}, {1535797, 95},
    {1732533, 96}, {1666997, 97}, {1601461, 98}, {1535925, 99}, {1732470, 100}, {1666934, 101}, {1601398, 102}, {1535862, 103},
    {1732598, 104}, {1667062, 105}, {1601526, 106}, {1535990, 107}, {1732535, 108}, {1666999, 109}, {1601463, 110}, {1535927, 111}
};

unsigned int randomState = 1804289383;

//generate 32-bit pseudo legal number by using XOR shift algorithm
unsigned int getRandomU32BitNumber(){
    unsigned int number = randomState;

    //XOR shift algorithm
    number ^= number << 13;
    number ^= number >> 17;
    number ^= number << 5;

    randomState = number;
    return number;
}

//generate 64-bit pseudo legal numbers
uint64_t getRandomU64BitNumber(){
    // lets define 4 random numbers
    uint64_t n1, n2, n3, n4;

    n1 = static_cast<uint64_t>(getRandomU32BitNumber()) & 0xFFFF; 
    n2 = static_cast<uint64_t>(getRandomU32BitNumber()) & 0xFFFF; 
    n3 = static_cast<uint64_t>(getRandomU32BitNumber()) & 0xFFFF; 
    n4 = static_cast<uint64_t>(getRandomU32BitNumber()) & 0xFFFF;

    return n1 | (n2 << 16) | ( n3 << 32) | (n4 << 48);
}

uint64_t generateMagicNumber(){
    return getRandomU64BitNumber() & getRandomU64BitNumber() & getRandomU64BitNumber();
}

int getTimeMs()
{
    struct timeval timeValue;
    gettimeofday(&timeValue, NULL);
    return timeValue.tv_sec * 1000 + timeValue.tv_usec / 1000;
}


